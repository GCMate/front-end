[{"C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\index.js":"1","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\reportWebVitals.js":"2","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\App.js":"3","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\About.js":"4","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\RINInput.js":"5","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\PhoneEnter.js":"6","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\firebase-config.js":"7","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\ClassList.js":"8","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\GroupChat.js":"9","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\Chat.js":"10"},{"size":552,"mtime":1665863820938,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1665859900094,"results":"13","hashOfConfig":"12"},{"size":834,"mtime":1668909707095,"results":"14","hashOfConfig":"12"},{"size":932,"mtime":1666818362605,"results":"15","hashOfConfig":"12"},{"size":3941,"mtime":1668909696728,"results":"16","hashOfConfig":"12"},{"size":5892,"mtime":1668889536182,"results":"17","hashOfConfig":"12"},{"size":497,"mtime":1668889514713,"results":"18","hashOfConfig":"12"},{"size":14730,"mtime":1668983241776,"results":"19","hashOfConfig":"12"},{"size":7837,"mtime":1668977045547,"results":"20","hashOfConfig":"12"},{"size":4890,"mtime":1668971084723,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"13qaa97",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\index.js",[],[],[],"C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\reportWebVitals.js",[],[],"C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\App.js",[],[],"C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\About.js",["58"],[],"import React, { useState } from 'react';\r\nimport gcmateLogo from '../img/GCMateIcon.png';\r\nimport speech1 from '../img/SpeechLeft.png'; \r\nimport speech2 from '../img/SpeechRight.png';\r\nimport './About.css'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"About\" style={{\r\n            position: 'absolute',\r\n            backgroundImage: 'url('+gcmateLogo+')',\r\n            backgroundSize: \"cover\",\r\n            height: \"721px\",\r\n            width: \"1535px\"}}>\r\n\r\n        <div className=\"Title\"> \r\n            <h1 class=\"display-2\"> <span className=\"TitleText\">About</span></h1>\r\n        </div>\r\n        <div className=\"SpeechBox1\"> <img src={speech1} width=\"600\" alt=\"box1\" /> </div>\r\n        <div className=\"SpeechBox2\"> <img src={speech2} width=\"570\" alt=\"box2\" /> </div>\r\n        \r\n    </div>\r\n    );\r\n};\r\n\r\n// <div className=\"SpeechBox2\"> <img src={speech2} width=\"570\" alt=\"box2\" /> </div>\r\nexport default About; ","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\RINInput.js",["59","60","61"],[],"C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\PhoneEnter.js",["62","63","64","65"],[],"import React, { useEffect, useState } from 'react';\nimport gcmateLogo from '../img/GCMateIcon.png';\nimport MouseIcon from '../img/CompMouse.png';\nimport LeftArrowIcon from '../img/LeftArrowIcon.png'\nimport {useLocation, useNavigate, Navigate, BrowserRouter as Router, Link} from 'react-router-dom';\nimport PhoneInput from 'react-phone-input-2'\nimport { app } from '../firebase-config';\nimport { getAuth } from \"firebase/auth\";\nimport { RecaptchaVerifier, signInWithPhoneNumber } from \"firebase/auth\";\nimport Button from 'react-bootstrap/Button';\nimport 'react-phone-input-2/lib/style.css'\nimport './PhoneEnter.css';\n\nconst PhoneEnter = () => {\n    const authentication = getAuth(app);\n    // Get RIN from RINInput page \n    const navigate = useNavigate();\n    const {state} = useLocation();\n    const { rin } = state; \n\n    const [phoneNum, setPhoneNum] = useState(null);\n    /* validRIN = 0 --> Phone number hasn't been inputted yet, Display original text \n     * validRIN = 1 --> Phone number invalid, Display \"Invalid phone number\" text\n     * validRIN = 2 --> Phone number is valid, Go to Phone Number Validation page \n     */\n    const [validPhoneNum, setValidPhoneNum] = useState(0); \n    // Code used for phone number verification \n    const [otp, setOTP] = useState('');\n    // Checks whether the user's mouse is hovering over an object or not \n    const [hover, setHover] = useState(false); \n    // Used to change text prompt if user inputs incorrect OTP \n    const [incorrectOTP, setIncorrectOTP] = useState(false); \n    const [nextPage, setNextPage] = useState(false); \n\n    function checkValidPhoneNum() {\n        if (phoneNum.length !== 11) { setValidPhoneNum(1); }\n        else { \n          let finalPhoneNum = \"+\" + phoneNum; \n          setValidPhoneNum(2); \n          window.recaptchaVerifier = new RecaptchaVerifier('otpRegister', {\n            'size': 'invisible',\n            'callback': (response) => {\n              // reCAPTCHA solved, allow signInWithPhoneNumber.\n            }\n          }, authentication); \n          signInWithPhoneNumber(authentication, finalPhoneNum,  window.recaptchaVerifier)\n          .then(confirmationResult => {\n            window.confirmationResult = confirmationResult;\n          }).catch((error) => {\n            // Error; SMS not sent\n            console.log(error); \n          });\n        }\n    }\n\n    const verifyOTP = (e) => {\n      let pin = e.target.value; \n      setOTP(pin); \n\n      if (pin.length === 6) { \n        // Check correctness of OTP\n        let confirmationResult = window.confirmationResult; \n        confirmationResult.confirm(pin).then((result) => {\n          // User signed in successfully.\n          const user = result.user;\n          \n          const jsonData = { RIN: rin, PHONE: phoneNum }\n\n          fetch('http://127.0.0.1:5000/api/phoneRIN', {  // Enter your IP address here\n\n          method: 'POST', \n          headers: { \"Content-Type\": \"application/json\" }, \n          body: JSON.stringify(jsonData) // body data type must match \"Content-Type\" header\n\n          }).then((response) => response.json())\n          .catch((err) => { console.log(err.message);});\n          \n          navigate('/classList', { state: { user_rin: rin, new_user: true } });\n          \n        }).catch((error) => {\n          // Prompt user to try again \n          setIncorrectOTP(true);\n        });\n      }\n    }\n\n    return (\n        <div className=\"PhoneEnter\" style={{\n          position: 'absolute',\n          backgroundImage: 'url('+gcmateLogo+')',\n          backgroundSize: \"cover\",\n          height: \"100%\", \n          width: \"100%\"\n        }}>\n          \n          <Link to=\"/\">\n            <Button size=\"lg\"  className=\"LogoutButton\" style={{\n                position: 'absolute'}}>\n                <img src={LeftArrowIcon} alt=\"add item\" width=\"30\" /> Back\n            </Button>\n          </Link>\n\n          {nextPage && <Navigate replace to=\"/classList\"/>}\n          <div className=\"Title\"><h1 className=\"display-2\"> Almost \n            <span className=\"LastWord1\"> there...</span> </h1></div> \n    \n          <div className=\"Prompt\" style={{height: '10vh'}}> \n              {!incorrectOTP && validPhoneNum === 0 && <h2 className=\"PromptText\">\n                Please enter your <span className=\"PN\">phone number </span></h2> }\n              {!incorrectOTP && validPhoneNum === 1 && <h2 className=\"PromptTextInvalid\">\n                Invalid phone number. Please try again. </h2>}\n              {!incorrectOTP && validPhoneNum === 2 && \n              <h2 className=\"PromptText\"> Please enter your \n                <span className=\"LastWord3\"> verification code</span> </h2>}\n              {incorrectOTP && validPhoneNum === 2 && \n              <h2 className=\"PromptTextInvalid\">Invalid OTP. Please try again. </h2>}\n          </div>\n          \n          <div className=\"PhoneTextInput\" style={{position: 'absolute', left: '40%'}}>\n          { validPhoneNum !== 2 && \n          <PhoneInput \n            onlyCountries={['us']}\n            country={'us'}\n            value={phoneNum}\n            onChange={setPhoneNum}/> }\n\n            {validPhoneNum !== 2 && \n              <Button variant=\"success\" className=\"PhoneSubmitButton\" \n                onClick={()=> {checkValidPhoneNum();} }> SUBMIT </Button> }\n            </div>\n\n            {validPhoneNum === 2 && \n              <input type=\"number\" value={otp} onChange={verifyOTP}/> }\n          \n          <div className=\"LearnIcon\" > \n            <Link to=\"/about\">\n            <img \n              onMouseEnter={() => setHover(true)}\n              onMouseLeave={() => setHover(false)}\n              src={MouseIcon} width=\"40\" alt=\"mouse\"/>\n              </Link>\n            { hover && \n              (<h1> LEARN MORE </h1>)}\n          </div>\n          \n          <div id=\"otpRegister\"> </div>\n        </div>\n        \n        \n      );    \n};\n\nexport default PhoneEnter;",[],"C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\firebase-config.js",["66"],[],"import { initializeApp } from 'firebase/app';\nimport { getAuth } from \"firebase/auth\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDiP9EkprUpfhyBBqdpTwmOItdPVuFNgj8\",\n    authDomain: \"phone-auth-5eeeb.firebaseapp.com\",\n    projectId: \"phone-auth-5eeeb\",\n    storageBucket: \"phone-auth-5eeeb.appspot.com\",\n    messagingSenderId: \"78836410767\",\n    appId: \"1:78836410767:web:dd9239540208233c9403fa\"\n};\n\nexport const app = initializeApp(firebaseConfig);\n//export const authentication = getAuth(app);","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\ClassList.js",["67","68","69","70","71","72"],[],"C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\GroupChat.js",["73","74","75"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation, Link } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport gcmateLogo from '../img/GCMateIcon.png';\nimport logoutIcon from '../img/LogoutIcon.png';\nimport LeftArrowIcon from '../img/LeftArrowIcon.png'\nimport chatIcon from '../img/ChatIcon.png'\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Card from 'react-bootstrap/Card';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Toast from 'react-bootstrap/Toast';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\nimport Alert from 'react-bootstrap/Alert';\nimport './GroupChat.css';\n\nconst GroupChat = () => {\n    const navigate = useNavigate();\n    const {state} = useLocation();\n    const {rin} = state; \n    const {course_title} = state;\n    const {course_id} = state; \n\n    // ===== Show states =====    \n    // Show the user's joined group chats \n    const [showJoinedGC, setShowJoinedGC] = useState(false); \n    // Alert for joining chat\n    const [showJoinAlert, setShowJoinAlert] = useState(false); \n    // Alert for leaving chat\n    const [showLeaveAlert, setShowLeaveAlert] = useState(false);      \n    // ====================    \n\n    const [members, setMembers] = useState([]); \n    const [joinedChats, setJoinedChats] = useState([]); \n\n    // Executed when page loads \n    useEffect(() => {\n        // When page loads, get the list of members of the chat\n        const course_jsonData = { COURSEID: course_id }\n          \n        fetch('http://127.0.0.1:5000/api/chatMembersList', {  \n\n        method: 'POST', \n        headers: { \"Content-Type\": \"application/json\" }, \n        body: JSON.stringify(course_jsonData) \n\n        }).then((response) => response.json())\n        .then(data => { setMembers(data.members)\n                        setJoinedChats(data.members.indexOf(rin) > -1 ? ['Chat Room 1'] : [])})\n        .catch((err) => { console.log(err);});\n    }, [])\n\n    // ========== API CALLS ==========\n    // Adds the user to the chat  \n    const joinChat = () => {\n        const chat_jsonData = { RIN: rin, COURSEID: course_id}\n          \n        fetch('http://127.0.0.1:5000/api/addUserChat', {  \n\n        method: 'POST', \n        headers: { \"Content-Type\": \"application/json\" }, \n        body: JSON.stringify(chat_jsonData) \n\n        }).then((response) => response.json())\n        .then(data => {setMembers(data.users)\n                       setJoinedChats(['Chat Room 1'])\n                       setShowJoinAlert(true)})\n        .catch((err) => { console.log(err);});\n    }\n\n    const leaveChat = () => {\n        const chat_jsonData = { RIN: rin, COURSEID: course_id}\n          \n        fetch('http://127.0.0.1:5000/api/removeUserChat', {  \n\n        method: 'POST', \n        headers: { \"Content-Type\": \"application/json\" }, \n        body: JSON.stringify(chat_jsonData) \n\n        }).then((response) => response.json())\n        .then(data => {setMembers(data.users)\n                       setJoinedChats([])\n                       setShowLeaveAlert(true)})\n        .catch((err) => { console.log(err);});\n    }\n    // =================================\n\n    return (\n        <div className=\"GroupChat\" style={{\n            position: 'absolute',\n            backgroundImage: 'url('+gcmateLogo+')',\n            backgroundSize: \"cover\",\n            height: \"100%\", \n            width: \"100%\"}}>\n\n        <Navbar bg=\"info\" className=\"NavbarBackground\"  \n            style={{position: 'absolute', height: '17vh', width: \"100%\"}}>\n            <Container> </Container>\n        </Navbar>\n      \n        <div className=\"GroupChatTitle\" \n            style={{position: 'absolute'}}> \n            <h1 className=\"display-3\"> <span className=\"TitleTextGC\">Group Chats</span></h1>\n        </div>\n        \n        <Link to=\"/classList\" state={{ user_rin: rin }}>\n            <Button size=\"lg\" className=\"ClassListButton\" style={{position: 'absolute'}}>\n                <img src={LeftArrowIcon} alt=\"add item\" width=\"30\" /> Back to Courses\n            </Button>\n        </Link>\n\n        <Link to=\"/\">\n            <Button size=\"lg\" variant=\"danger\" className=\"LogoutButton\" style={{\n                position: 'absolute'}}>\n                <img src={logoutIcon} alt=\"add item\" width=\"30\" /> Log  Out\n            </Button>\n        </Link>\n\n        <>\n            <Button size=\"lg\" className=\"GCMenu\"\n                onClick={() => setShowJoinedGC(true)}\n                style={{position: 'absolute',  backgroundColor: 'green'}}>\n                    <img src={chatIcon} alt=\"add item\" width=\"30\" /> Joined Group Chats\n            </Button>\n\n            <Offcanvas show={showJoinedGC} onHide={() => setShowJoinedGC(false)}>\n            <Offcanvas.Header closeButton>\n            <Offcanvas.Title>RPI Student {rin} </Offcanvas.Title>\n            </Offcanvas.Header>\n            \n            <Offcanvas.Body>\n                {joinedChats.map(c => {\n                    return( <>\n                             <h4> {c} </h4> \n                            </>\n                        );\n                    })}\n            </Offcanvas.Body>\n            \n        </Offcanvas>\n\n        </>\n\n        <Card style={{position: 'absolute', width:\"20%\", height:\"15%\"}} className=\"CourseReminder\">\n        <Card.Header> <span className=\"CurrCourseText\"> Current Course </span>: {course_id} </Card.Header>\n        <Card.Body>\n            <Card.Title>{course_title}</Card.Title>\n            \n            \n        </Card.Body>\n        </Card>\n        \n        <div className=\"GroupChatComponent\" style={{position: 'absolute'}}>\n            <Toast bg='warning' >\n                <Toast.Header closeButton={false}>\n                    <img src=\"holder.js/20x20?text=%20\"  alt=\"\" />\n                    <strong className=\"me-auto\"> Chat Room 1</strong>\n                    <small> \n                        {members.indexOf(rin) == -1 &&\n                        <Button size=\"sm\" variant=\"outline-success\"\n                         onClick={joinChat}> Join Chat</Button>}\n\n\n                        {members.indexOf(rin) > -1 &&\n                            <>\n                            <Button size=\"sm\" variant=\"outline-danger\" \n                            onClick={leaveChat}> Leave Chat</Button>\n                            \n                            <Link to=\"/chat\" \n                                    state={{ user_rin: rin, class_title: course_title, class_id: course_id }}>\n                                    <Button size=\"sm\" variant=\"outline-dark\" className=\"ChatRoomButton\"> \n                                        Enter Chat Room \n                                    </Button>\n                            </Link> \n                            \n                            </>\n                        }\n                        \n                        \n                    </small>\n                </Toast.Header>\n                <Toast.Body>\n                    <span className=\"BoldText\"> Members: </span> \n                    {members.map(m => {\n                        return(\n                            <>\n                             {m} {' '} \n                        </>\n                        );\n                    })}\n                </Toast.Body>\n            </Toast>\n            </div>\n\n        <Alert show={showJoinAlert} variant=\"success\" className=\"ChatAlert\"\n            onClose={() => setShowJoinAlert(false)} dismissible>\n            <Alert.Heading>You have joined a group chat!</Alert.Heading>\n        </Alert>\n\n        <Alert show={showLeaveAlert} variant=\"secondary\" className=\"ChatAlert\"\n            onClose={() => setShowLeaveAlert(false)} dismissible>\n            <Alert.Heading>You have left a group chat!</Alert.Heading>\n        </Alert>\n\n        </div>\n    );\n  };\n  \n  \n  export default GroupChat;","C:\\Users\\BRIAN\\Documents\\GCMate\\front-end\\src\\pages\\Chat.js",["76","77"],[],{"ruleId":"78","severity":1,"message":"79","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"82","line":4,"column":39,"nodeType":"80","messageId":"81","endLine":4,"endColumn":45},{"ruleId":"78","severity":1,"message":"83","line":17,"column":12,"nodeType":"80","messageId":"81","endLine":17,"endColumn":19},{"ruleId":"78","severity":1,"message":"84","line":18,"column":12,"nodeType":"80","messageId":"81","endLine":18,"endColumn":20},{"ruleId":"78","severity":1,"message":"85","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":26},{"ruleId":"78","severity":1,"message":"82","line":5,"column":62,"nodeType":"80","messageId":"81","endLine":5,"endColumn":68},{"ruleId":"78","severity":1,"message":"86","line":33,"column":22,"nodeType":"80","messageId":"81","endLine":33,"endColumn":33},{"ruleId":"78","severity":1,"message":"87","line":65,"column":17,"nodeType":"80","messageId":"81","endLine":65,"endColumn":21},{"ruleId":"78","severity":1,"message":"88","line":2,"column":10,"nodeType":"80","messageId":"81","endLine":2,"endColumn":17},{"ruleId":"78","severity":1,"message":"89","line":27,"column":12,"nodeType":"80","messageId":"81","endLine":27,"endColumn":19},{"ruleId":"78","severity":1,"message":"90","line":38,"column":11,"nodeType":"80","messageId":"81","endLine":38,"endColumn":22},{"ruleId":"78","severity":1,"message":"91","line":39,"column":11,"nodeType":"80","messageId":"81","endLine":39,"endColumn":21},{"ruleId":"92","severity":1,"message":"93","line":57,"column":8,"nodeType":"94","endLine":57,"endColumn":10,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":72,"column":63,"nodeType":"98","messageId":"99","endLine":72,"endColumn":65},{"ruleId":"96","severity":1,"message":"97","line":125,"column":67,"nodeType":"98","messageId":"99","endLine":125,"endColumn":69},{"ruleId":"78","severity":1,"message":"100","line":18,"column":11,"nodeType":"80","messageId":"81","endLine":18,"endColumn":19},{"ruleId":"92","severity":1,"message":"101","line":51,"column":8,"nodeType":"94","endLine":51,"endColumn":10,"suggestions":"102"},{"ruleId":"96","severity":1,"message":"97","line":159,"column":47,"nodeType":"98","messageId":"99","endLine":159,"endColumn":49},{"ruleId":"78","severity":1,"message":"103","line":4,"column":36,"nodeType":"80","messageId":"81","endLine":4,"endColumn":40},{"ruleId":"78","severity":1,"message":"104","line":157,"column":10,"nodeType":"80","messageId":"81","endLine":157,"endColumn":21},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'rinData' is assigned a value but never used.","'nextPage' is assigned a value but never used.","'useEffect' is defined but never used.","'setNextPage' is assigned a value but never used.","'user' is assigned a value but never used.","'getAuth' is defined but never used.","'subject' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleShow' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCourseList'. Either include it or remove the dependency array.","ArrayExpression",["105"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'navigate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'course_id' and 'rin'. Either include them or remove the dependency array.",["106"],"'Link' is defined but never used.","'class_title' is assigned a value but never used.",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [fetchCourseList]",{"range":"111","text":"112"},"Update the dependencies array to be: [course_id, rin]",{"range":"113","text":"114"},[2346,2348],"[fetchCourseList]",[1995,1997],"[course_id, rin]"]